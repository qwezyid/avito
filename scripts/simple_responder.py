#!/usr/bin/env python3

import sys
import os
import time
import psycopg2
import psycopg2.extras
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.services.avito_client import avito_client

class SimpleResponder:
    def __init__(self, user_id: int):
        self.user_id = user_id
        self.db_config = {
            'host': "89.169.45.152",
            'database': "Avito",
            'user': "Tim",
            'password': "AVITOPassw0rd"
        }
    
    def process_new_messages(self):
        messages = self.get_unprocessed_messages()
        
        for message in messages:
            chat_id = message['chat_id']
            user_text = message['content_text']
            
            print(f"\nüì® Processing: {user_text[:50]}...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = self.generate_response(user_text)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            result = avito_client.send_message(self.user_id, chat_id, response)
            
            if result:
                print(f"‚úÖ Sent: {response[:50]}...")
                self.mark_as_processed(message['message_id'])
            else:
                print(f"‚ùå Failed to send response")
    
    def get_unprocessed_messages(self):
        try:
            conn = psycopg2.connect(**self.db_config, cursor_factory=psycopg2.extras.RealDictCursor)
            with conn.cursor() as cursor:
                cursor.execute("""
                    SELECT * FROM avito_messages 
                    WHERE direction = 'in' 
                      AND ai_processed = FALSE 
                      AND content_text IS NOT NULL
                      AND content_text != ''
                    ORDER BY created ASC
                    LIMIT 5
                """)
                messages = cursor.fetchall()
            conn.close()
            return messages
        except Exception as e:
            print(f"Database error: {e}")
            return []
    
    def mark_as_processed(self, message_id):
        try:
            conn = psycopg2.connect(**self.db_config)
            with conn.cursor() as cursor:
                cursor.execute("""
                    UPDATE avito_messages 
                    SET ai_processed = TRUE, processed_at = NOW()
                    WHERE message_id = %s
                """, (message_id,))
                conn.commit()
            conn.close()
        except Exception as e:
            print(f"Mark processed error: {e}")
    
    def generate_response(self, user_text):
        text_lower = user_text.lower()
        
        if any(word in text_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–¥–æ–±—Ä—ã–π']):
            return "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–º–æ–≥—É –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≤–æ–∑–∫—É. –û—Ç–∫—É–¥–∞ –∏ –∫—É–¥–∞ –Ω—É–∂–Ω–æ –≤–µ–∑—Ç–∏ –≥—Ä—É–∑?"
        
        elif any(word in text_lower for word in ['–∏–∑', '–æ—Ç', '–¥–æ', '–≤', '–º–∞—Ä—à—Ä—É—Ç']):
            return "–ü–æ–Ω—è–ª –º–∞—Ä—à—Ä—É—Ç. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≥—Ä—É–∑–µ - —á—Ç–æ –≤–µ–∑–µ–º, –∫–∞–∫–æ–π –≤–µ—Å –∏ –≥–∞–±–∞—Ä–∏—Ç—ã?"
        
        elif any(word in text_lower for word in ['–≥—Ä—É–∑', '–∫–≥', '—Ç–æ–Ω–Ω', '–º–µ–±–µ–ª—å']):
            return "–û—Ç–ª–∏—á–Ω–æ! –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–∑–∫–∏. –°–∫–æ—Ä–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é —Ç–æ—á–Ω—É—é —Ü–µ–Ω—É."
        
        elif any(word in text_lower for word in ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ']):
            return "–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 15 000 —Ä—É–±–ª–µ–π. –¢–æ—á–Ω—É—é —Ü–µ–Ω—É —É—Ç–æ—á–Ω–∏—Ç –º–µ–Ω–µ–¥–∂–µ—Ä."
        
        else:
            return "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –ø–µ—Ä–µ–≤–æ–∑–∫–∏?"

if __name__ == "__main__":
    responder = SimpleResponder(user_id=414329950)
    
    while True:
        try:
            responder.process_new_messages()
            time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        except KeyboardInterrupt:
            print("\nStopping responder...")
            break
        except Exception as e:
            print(f"Error: {e}")
            time.sleep(5)

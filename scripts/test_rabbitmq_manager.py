#!/usr/bin/env python3

import sys
import os
import time
import threading
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.core.rabbitmq_manager import rabbitmq_manager

def test_rabbitmq_operations():
    """–¢–µ—Å—Ç –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π RabbitMQ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º RabbitMQ Manager...")
    
    try:
        # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–µ–π
        print("1Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥–∏...")
        if rabbitmq_manager.ensure_queues():
            print("‚úÖ –í—Å–µ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–∑–¥–∞–Ω—ã")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π")
            return False
        
        # –¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        print("2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        
        test_messages = [
            ('incoming_messages', {'chat_id': 'test123', 'text': '–ü—Ä–∏–≤–µ—Ç!'}),
            ('ai_processing', {'chat_id': 'test123', 'stage': 'greeting'}),
            ('price_calculation', {'route_from': '–ú–æ—Å–∫–≤–∞', 'route_to': '–°–ü–±'})
        ]
        
        for queue_type, message_data in test_messages:
            success = rabbitmq_manager.send_message(queue_type, message_data)
            if success:
                print(f"  ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {queue_type}")
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {queue_type}")
                return False
        
        # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –æ—á–µ—Ä–µ–¥—è—Ö
        print("3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ—á–µ—Ä–µ–¥—è—Ö...")
        for queue_type in ['incoming_messages', 'ai_processing', 'price_calculation']:
            info = rabbitmq_manager.get_queue_info(queue_type)
            if info:
                print(f"  üìä {queue_type}: {info['message_count']} —Å–æ–æ–±—â–µ–Ω–∏–π")
            else:
                print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {queue_type}")
        
        # –¢–µ—Å—Ç 4: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        print("4Ô∏è‚É£ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫...")
        
        processed_messages = []
        
        def test_handler(message_data):
            print(f"    üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {message_data}")
            processed_messages.append(message_data)
            return True  # –£—Å–ø–µ—à–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        
        success = rabbitmq_manager.register_handler('incoming_messages', test_handler)
        if success:
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞")
            return False
        
        # –¢–µ—Å—Ç 5: –ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
        print("5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (5 —Å–µ–∫—É–Ω–¥)...")
        
        def consume_messages():
            rabbitmq_manager.start_consuming('incoming_messages')
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        consume_thread = threading.Thread(target=consume_messages, daemon=True)
        consume_thread.start()
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        time.sleep(3)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ
        rabbitmq_manager.stop_consuming()
        
        if len(processed_messages) > 0:
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(processed_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        else:
            print("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞)")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã RabbitMQ Manager –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö RabbitMQ: {e}")
        return False

if __name__ == "__main__":
    success = test_rabbitmq_operations()
    if not success:
        sys.exit(1)

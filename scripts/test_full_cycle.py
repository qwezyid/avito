#!/usr/bin/env python3

import sys
import os
import time
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.core.rabbitmq_manager import rabbitmq_manager
from src.services.avito_client import avito_client

def test_message_cycle():
    print("Testing full message cycle...")
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    token = avito_client.get_active_token()
    if not token:
        print("‚ùå No active token")
        return False
    print("‚úÖ Token available")
    
    # –¢–µ—Å—Ç 2: –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    test_message = {
        'chat_id': 'test_chat_123',
        'message_id': 'test_msg_456',
        'author_id': 789,
        'text': '–ü—Ä–∏–≤–µ—Ç! –ù—É–∂–Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫–∞ –≥—Ä—É–∑–∞',
        'created': int(time.time()),
        'direction': 'in',
        'type': 'text',
        'user_id': 414329950
    }
    
    success = rabbitmq_manager.send_message('incoming_messages', test_message)
    if success:
        print("‚úÖ Test message queued")
    else:
        print("‚ùå Failed to queue message")
        return False
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥–∏
    for queue_type in ['incoming_messages', 'ai_processing', 'outgoing_messages']:
        info = rabbitmq_manager.get_queue_info(queue_type)
        if info:
            print(f"üìä {queue_type}: {info['message_count']} messages")
        else:
            print(f"‚ùå Cannot get {queue_type} info")
    
    print("üéâ Full cycle test completed")
    return True

if __name__ == "__main__":
    test_message_cycle()

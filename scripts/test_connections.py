#!/usr/bin/env python3

import redis
import pika
import psycopg2
import psycopg2.extras

def test_postgresql():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º PostgreSQL...")
    try:
        connection = psycopg2.connect(
            host="89.169.45.152",
            port=5432,
            database="Avito",
            user="Tim",
            password="AVITOPassw0rd",
            cursor_factory=psycopg2.extras.RealDictCursor
        )
        
        with connection.cursor() as cursor:
            cursor.execute("SELECT version();")
            result = cursor.fetchone()
            print(f"‚úÖ PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç: {result['version'][:50]}...")
        
        connection.close()
        return True
    except Exception as e:
        print(f"‚ùå PostgreSQL –æ—à–∏–±–∫–∞: {e}")
        return False

def test_redis():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º Redis...")
    try:
        r = redis.Redis(
            host="31.130.151.91",
            port=6379,
            username="Tim",
            password="AVITOPassw0rd",
            decode_responses=True
        )
        r.ping()
        info = r.info()
        print(f"‚úÖ Redis —Ä–∞–±–æ—Ç–∞–µ—Ç: –≤–µ—Ä—Å–∏—è {info['redis_version']}")
        return True
    except Exception as e:
        print(f"‚ùå Redis –æ—à–∏–±–∫–∞: {e}")
        return False

def test_rabbitmq():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º RabbitMQ...")
    try:
        uri = 'amqp://Tim:AVITOPassw0rd@85.193.95.165:5672/Avito'
        connection = pika.BlockingConnection(pika.URLParameters(uri))
        channel = connection.channel()
        print("‚úÖ RabbitMQ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        connection.close()
        return True
    except Exception as e:
        print(f"‚ùå RabbitMQ –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ —Å–µ—Ä–≤–∏—Å–∞–º\n")
    
    results = []
    results.append(test_postgresql())
    results.append(test_redis())
    results.append(test_rabbitmq())
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {sum(results)}/3 —Å–µ—Ä–≤–∏—Å–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
    
    if all(results):
        print("üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏")

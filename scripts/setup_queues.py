#!/usr/bin/env python3

import pika
import sys

def create_project_queues():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞"""
    try:
        print("üîç –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ RabbitMQ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π...")
        
        uri = 'amqp://Tim:AVITOPassw0rd@85.193.95.165:5672/Avito'
        connection = pika.BlockingConnection(pika.URLParameters(uri))
        channel = connection.channel()
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π –ø—Ä–æ–µ–∫—Ç–∞
        queues = [
            'avito.messages.incoming',
            'avito.ai.processing', 
            'avito.messages.outgoing',
            'avito.price.calculate',
            'avito.admin.notifications',
            'avito.amocrm.sync'
        ]
        
        print("üìã –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥–∏:")
        for queue_name in queues:
            channel.queue_declare(queue=queue_name, durable=True)
            print(f"  ‚úÖ {queue_name}")
        
        connection.close()
        print(f"\nüéâ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {len(queues)} –æ—á–µ—Ä–µ–¥–µ–π!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π: {e}")
        return False

if __name__ == "__main__":
    success = create_project_queues()
    if not success:
        sys.exit(1)

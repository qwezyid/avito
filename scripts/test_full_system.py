#!/usr/bin/env python3

import sys
import os
import time
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.core.redis_manager import redis_session_manager
from src.core.rabbitmq_manager import rabbitmq_manager
from src.core.system_coordinator import system_coordinator

def test_full_system():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("üöÄ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã Avito AI Assistant\n")
    
    results = []
    
    # –¢–µ—Å—Ç 1: Redis
    print("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º Redis...")
    try:
        test_session = redis_session_manager.create_new_session('full_test_123')
        if test_session:
            print("  ‚úÖ Redis —Ä–∞–±–æ—Ç–∞–µ—Ç")
            results.append(True)
        else:
            print("  ‚ùå Redis –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            results.append(False)
    except Exception as e:
        print(f"  ‚ùå Redis –æ—à–∏–±–∫–∞: {e}")
        results.append(False)
    
    # –¢–µ—Å—Ç 2: RabbitMQ
    print("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º RabbitMQ...")
    try:
        success = rabbitmq_manager.send_message('incoming_messages', {
            'chat_id': 'full_test_123',
            'text': '–°–∏—Å—Ç–µ–º–Ω—ã–π —Ç–µ—Å—Ç'
        })
        if success:
            print("  ‚úÖ RabbitMQ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            results.append(True)
        else:
            print("  ‚ùå RabbitMQ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            results.append(False)
    except Exception as e:
        print(f"  ‚ùå RabbitMQ –æ—à–∏–±–∫–∞: {e}")
        results.append(False)
    
    # –¢–µ—Å—Ç 3: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
    print("3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä...")
    try:
        health = system_coordinator.check_system_health()
        if health['status'] in ['healthy', 'degraded']:
            print("  ‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
            results.append(True)
        else:
            print("  ‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            results.append(False)
    except Exception as e:
        print(f"  ‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –æ—à–∏–±–∫–∞: {e}")
        results.append(False)
    
    # –¢–µ—Å—Ç 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    print("4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é...")
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –≤ Redis
        session = redis_session_manager.create_new_session('integration_test')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ RabbitMQ
        message_sent = rabbitmq_manager.send_message('ai_processing', {
            'chat_id': 'integration_test',
            'message': '–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
            'stage': 'greeting'
        })
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
        updated = redis_session_manager.add_message_to_history(
            'integration_test', 
            '–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏', 
            'in'
        )
        
        if session and message_sent and updated:
            print("  ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            results.append(True)
        else:
            print("  ‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            results.append(False)
            
    except Exception as e:
        print(f"  ‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—à–∏–±–∫–∞: {e}")
        results.append(False)
    
    # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print("5Ô∏è‚É£ –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
    try:
        redis_session_manager.delete_chat_session('full_test_123')
        redis_session_manager.delete_chat_session('integration_test')
        print("  ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
    except Exception as e:
        print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {sum(results)}/4 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
    
    if all(results):
        print("üéâ –í–°–Ø –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        print("‚úÖ –ì–æ—Ç–æ–≤–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
        return True
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ")
        return False

if __name__ == "__main__":
    success = test_full_system()
    if not success:
        sys.exit(1)
